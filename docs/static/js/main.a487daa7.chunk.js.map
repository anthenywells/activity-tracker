{"version":3,"sources":["utils/utils.ts","components/ActivityPanel/ActivityPanel.tsx","hooks/hooks.js","components/ClockPanel/ClockPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["formatDuration","duration","moment","utc","format","ActivityPanel","activityLog","className","length","map","activity","i","key","description","startTime","stopTime","diff","getDuration","useLocalStorage","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","ClockPanel","activityStarted","setActivityStarted","setActivityLog","setStartTime","setDescription","type","placeholder","onChange","e","target","disabled","onClick","stopActivity","startActivity","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAEMA,EAAiB,SAACC,GACtB,OAAOC,IAAOC,IAAe,IAAXF,GAAiBG,OAAO,aCwB7BC,G,MAvBwC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACxD,OACE,2BAAOC,UAAU,6BACf,wBAAIA,UAAU,4BACZ,2CACA,0CACA,yCACA,yCAEDD,EAAYE,OAAS,GAAKF,EAAYG,KAAI,SAACC,EAAeC,GACzD,OACE,wBAAIJ,UAAU,2BAA2BK,IAAKD,GAC5C,4BAAKD,EAASG,aACd,4BAAKH,EAASI,WACd,4BAAKJ,EAASK,UACd,4BDbe,SAACD,EAAmBC,GAC7C,IAAId,EAAWC,IAAOC,IAAIY,EAAU,YAAYC,KAAKd,IAAOC,IAAIW,EAAW,YAAa,WACxF,MAAoC,iBAA7Bd,EAAeC,GAA+BD,EAAeC,GAAY,GCWjEgB,CAAYP,EAASI,UAAWJ,EAASK,kBCf7CG,EAAkB,SAACN,EAAKO,GAAgB,MAGbC,oBAAS,WAC7C,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQZ,GAEzC,OAAOS,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAGP,OADAC,QAAQC,IAAIF,GACLR,MAZwC,mBAG5CW,EAH4C,KAG/BC,EAH+B,KAiCnD,MAAO,CAACD,EAfS,SAAAE,GACf,IAEE,IAAMC,EACJD,aAAiBE,SAAWF,EAAMF,GAAeE,EAEnDD,EAAeE,GAEfX,OAAOC,aAAaY,QAAQvB,EAAKa,KAAKW,UAAUH,IAChD,MAAON,GAEPC,QAAQC,IAAIF,OCiCHU,G,MA5Dc,WAAO,IAAD,EACanB,EAAgB,YAAY,GADzC,mBAC1BoB,EAD0B,KACTC,EADS,OAEKrB,EAAgB,cAAe,IAFpC,mBAE1BZ,EAF0B,KAEbkC,EAFa,OAGCtB,EAAgB,YAAa,IAH9B,mBAG1BJ,EAH0B,KAGf2B,EAHe,OAIKvB,EAAgB,OAAO,IAJ5B,mBAI1BL,EAJ0B,KAIb6B,EAJa,KA4BjC,OACE,oCACE,yBAAKnC,UAAU,0BACb,2BACEA,UAAU,qBACVoC,KAAK,OACLC,YAAY,oBACZZ,MAAOnB,EACPgC,SAAU,SAACC,GAAQJ,EAAeI,EAAEC,OAAOf,QAC3CgB,SAAUV,IAEVA,EAQE,4BACE/B,UAAU,gBACV0C,QAAS,YAnCA,WAAO,IAAD,uBACzB,YAAc3C,EAAd,+CAA2B,CAAC,IAAnBK,EAAkB,QACzB,GAAIA,EAAEG,YAAcA,EAAW,CAC7B,IAAMC,EAAWb,MAASE,OAAO,YACjCO,EAAEI,SAAWA,EACb2B,EAAe,IACfF,EAAelC,GACfiC,GAAoBD,GACpB,QARqB,mFAmCEY,IACjBF,UAAWV,GAHb,iBAPF,4BACE/B,UAAU,iBACV0C,QAAS,YAnCG,WACpB,IAAMnC,EAAYZ,MAASE,OAAO,YAClCoC,GAAe,SAAClC,GAAD,4BAAiCA,GAAjC,CAA8C,CAAEO,cAAaC,YAAWC,SAAU,SACjG0B,EAAa3B,GACbyB,GAAoBD,GA+BKa,IACjBH,SAAUV,GAHZ,mBAeJ,kBAAC,EAAD,CAAehC,YAAaA,OCjDnB8C,G,MARO,WACpB,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,SCKc8C,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a487daa7.chunk.js","sourcesContent":["import moment from \"moment\"\n\nconst formatDuration = (duration: number) => {\n  return moment.utc(duration * 1000).format('HH:mm:ss')\n}\n\nexport const getDuration = (startTime: string, stopTime: string) => {\n  let duration = moment.utc(stopTime, \"HH:mm:ss\").diff(moment.utc(startTime, \"HH:mm:ss\"), 'seconds');\n  return formatDuration(duration) !== \"Invalid date\" ? formatDuration(duration) : \"\"\n}","import React from 'react';\nimport { getDuration } from \"../../utils/utils\"\nimport \"./ActivityPanel.scss\"\n\nconst ActivityPanel: React.FC<{ activityLog: any; }> = ({ activityLog }) => {\n  return (\n    <table className=\"activity-panel box mobile\">\n      <tr className=\"activity-panel__activity\">\n        <th>description</th>\n        <th>start time</th>\n        <th>stop time</th>\n        <th>duration</th>\n      </tr>\n      {activityLog.length > 0 && activityLog.map((activity: any, i: number) => {\n        return (\n          <tr className=\"activity-panel__activity\" key={i}>\n            <td>{activity.description}</td>\n            <td>{activity.startTime}</td>\n            <td>{activity.stopTime}</td>\n            <td>{getDuration(activity.startTime, activity.stopTime)}</td>\n          </tr>\n        )\n      })}\n    </table>\n  );\n}\n\nexport default ActivityPanel;\n","import { useState } from 'react';\n\n\n// Hook\nexport const useLocalStorage = (key, initialValue) =>{\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","import React from 'react';\nimport moment from \"moment\"\nimport ActivityPanel from '../ActivityPanel/ActivityPanel';\nimport {useLocalStorage} from \"../../hooks/hooks\"\nimport \"./ClockPanel.scss\"\n\nconst ClockPanel: React.FC = () => {\n  const [activityStarted, setActivityStarted] = useLocalStorage(\"activity\", false);\n  const [activityLog, setActivityLog] = useLocalStorage(\"activityLog\", []);\n  const [startTime, setStartTime] = useLocalStorage(\"startTime\", \"\");\n  const [description, setDescription] = useLocalStorage(\"desc\",\"\");\n\n\n  const startActivity = () => {\n    const startTime = moment().format(\"HH:mm:ss\")\n    setActivityLog((activityLog: Array<any>) => [...activityLog, { description, startTime, stopTime: \"\" }])\n    setStartTime(startTime)\n    setActivityStarted(!activityStarted);\n  }\n\n  const stopActivity = () => {\n    for (let i of activityLog) {\n      if (i.startTime === startTime) {\n        const stopTime = moment().format(\"HH:mm:ss\");\n        i.stopTime = stopTime\n        setDescription(\"\")\n        setActivityLog(activityLog)\n        setActivityStarted(!activityStarted);\n        break;\n      }\n    }\n  }\n\n\n  return (\n    <>\n      <div className=\"clock-panel box mobile\">\n        <input\n          className=\"clock-panel__input\"\n          type=\"text\"\n          placeholder=\"Enter an activity\"\n          value={description}\n          onChange={(e) => { setDescription(e.target.value) }}\n          disabled={activityStarted}\n        />\n        {!activityStarted ? (\n          <button\n            className=\"button primary\"\n            onClick={() => { startActivity() }}\n            disabled={activityStarted}>\n            Start Activity\n          </button>\n        ) : (\n            <button\n              className=\"button danger\"\n              onClick={() => { stopActivity() }}\n              disabled={!activityStarted}>\n              Stop Activity\n          </button>\n          )}\n      </div>\n      <ActivityPanel activityLog={activityLog} />\n    </>\n  );\n}\n\nexport default ClockPanel;\n","import React from 'react';\nimport ClockPanel from \"./components/ClockPanel/ClockPanel\"\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ClockPanel />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}